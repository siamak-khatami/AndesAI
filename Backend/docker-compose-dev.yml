# specify the version of compose
#version: "3"
# per each container we need to define a service block
services:
  app: # name for the container
    build: . # dir to the docker file
    # A longer format
#    build:
#      context: ./ # Path to the file
#      dockerfile: Dockerfile # docker file name
    depends_on:
      - postgres
    volumes:
      # ro is read-only
      - ./:/usr/src/app:ro  # A bind mount volume for code sync./ is relative to the yml file location.
      # if there is a SQL used for the progress then we do not need.
      - Models:/usr/src/app/Models:rw # this is to save the models from
      # In case we need to specify different folders to different services ./SERVICENAME liek ./backend
      #- NAME:PATH  # this is for named volumes
      # - PATH  # you can also create anonymous volumes here
      ######### just named volumes are needed to be added to the Volumes section down below
    ports:
      # - <port on local host>:<port on container> for example here container will listen to 8000 as we have in Dockerfile
      # ports should match the dockerfile
      # the first one is what you use as client to access the service, for example from postman
      # the second one is what container runs inside itself and docker-compose will lunch it on that port
      # for simplicity we hold both same if nothing special happens
      - 8000:8000
    command: python3 -m uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    env_file:
      - ./.env
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [ gpu ]  # Specify GPU support
#    environment:
      # It is better to use env file
      # to connect the postgres in another container to this container,
      # we need to know the hostname/ip of that container
      # there are a couple of ways to do this
      # the easiest one is to use the docker DNS system
      # instead of referring localhost in hostname
#      - DATABASE_HOSTNAME=localhost
      # we refer to the postgres container, so it will automatically know where is the service
#      - DATABASE_HOSTNAME=localhost  # this refers to the postgres container which has been defined below
#      - DATABASE_PORT=5432
#      - DATABASE_PASSWORD=ni5Ju&}c^x(Xa32&&3ps
#      - DATABASE_NAME=book
#      - DATABASE_USERNAME=postgres


# we make a postgres container
  postgres:
    image: postgres
    env_file:
      - ./Secrets/Postgres.env
#    environment:
#    # Postgres demands at least these two parameters
#      - POSTGRES_PASSWORD=ni5Ju&}c^x(Xa32&&3ps
#      - POSTGRES_DB=book
#      - POSTGRES_HOST_AUTH_METHOD = "trust"  # this is needed to make the trust
    # Volumes are needed to save the data in the volume, otherwise all data will go away.
    # so in our container local machine we specify the location for the volumes_from:
    # this volume is defined by docker documents
    # we need to make it a GLOBAL VARIABLE so every all containers can have access to them
    # postgres-db for example, is a tag name to an anonymous folder, in which docker will remember to mount
    # the same volume every time instead of re-generating a random one.
    # if we use a path instead of a name, or the combination of the name and path, then it will sync the folder,
    volumes:
      - postgres-db:/var/lib/postgresql/data  # A named volume

# Volumes usually are needed to be accessed globally by all containers, so we redefine the postgres volume as a global
# variable again here.
volumes:
  # Same name as it has been defined before.
  postgres-db:
  Models:
